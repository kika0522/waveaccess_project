import asyncio
import json
from typing import Dict
from sqlalchemy import update, insert
from sqlalchemy.ext.asyncio import AsyncSession
from app.config import settings
from app.database import async_session_maker
from app.ext_services.sonarqube_mock import generate_sonarqube_report
from app.ext_services.second_service_mock import generate_second_service_report
from app.ext_services.third_service_mock import generate_third_service_report
from app.files.minio_client import MinioClient
from app.reports.models import Report

from app.logger_config import app_logger

logger = app_logger.getChild(__name__)

class ReportsService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á—ë—Ç–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–æ–º MinIO"""
        self.minio_client = MinioClient(bucket_name=settings.MINIO_BUCKET_NAME)
        logger.info("–°–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def _generate_all_reports(self, task_id: str) -> Dict:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–æ–≤

        :param task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤
        :return: Dict: –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        """

        logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        sonarqube, second, third = await asyncio.gather(
            generate_sonarqube_report(task_id),
            generate_second_service_report(task_id),
            generate_third_service_report(task_id),
        )

        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        return {
            "results": {
                "sonarqube": sonarqube,
                "second_service": second,
                "third_service": third,
            }
        }

    async def generate_report(self, task_id: str, db: AsyncSession):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –æ—Ç—á—ë—Ç–∞ –ø–æ ID –∑–∞–¥–∞—á–∏

        :param task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
        :param db: –°–µ—Å—Å–∏—è –ë–î
        """
        try:
            logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å IN_PROGRESS –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            await db.execute(
                update(Report)
                .where(Report.id == task_id)
                .values(status="IN_PROGRESS")
            )
            await db.commit()  # üí° –≠—Ç–æ—Ç –∫–æ–º–º–∏—Ç –º–æ–∂–µ—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
            logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ IN_PROGRESS")


            report_data = await self._generate_all_reports(task_id)
            report_json = json.dumps(report_data)

            await db.execute(
                update(Report)
                .where(Report.id == task_id)
                .values(status="SUCCESS", results=report_json)
            )
            await db.commit()
            logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ {task_id}: {e}")
            await db.rollback()
            await db.execute(
                update(Report)
                .where(Report.id == task_id)
                .values(status="ERROR", results=None)
            )
            await db.commit()
            raise

    async def run_report_generation(self, task_id: str):
        """
        –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ

        :param task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
        :return:
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        async with async_session_maker() as new_db:
            await self.generate_report(task_id, new_db)

    async def create_new_report(self, task_id: str, db: AsyncSession):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        :param task_id: ID –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        :param db: –°–µ—Å—Å–∏—è –ë–î
        """
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        async with db.begin():
            await db.execute(
                insert(Report)
                .values(id=task_id, status="PENDING")
            )
            await db.commit()
            logger.info(f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Ç—á–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")


reports_service = ReportsService()